# this file processes a training log generated by solve.py and plots the resulting training&validation curves for visualization

import matplotlib.pyplot as plt
from PIL import Image
import numpy as np
import scipy.io
from subprocess import call

def parse_results(filename_train,filename_val):
    
    iternum = []
    trainerr = []
    lr = []
    
    with open(filename_train) as f:
        for line in f:
            data = line.split()
            if len(data) == 3:
                iternum.append(int(data[0]))
                trainerr.append(float(data[1]))
                lr.append(float(data[2]))


    iternum_test = []
    testerr = []

    with open(filename_val) as f:
        for line in f:
            data = line.split()
            iternum_test.append(int(data[0]))
            testerr.append(float(data[1]))
            
    return (iternum,trainerr,lr,iternum_test,testerr)


def plotErrors(iternum,trainerr,lr,iternum_test,testerr,modelNames,Nmodels,ylims=[]):
    plt.figure(figsize=(20,3))
    for M in range(Nmodels):
        plt.subplot(1,len(modelNames),1+M); 
        plt.plot(iternum[M], trainerr[M], 'b'); 
        plt.plot(iternum_test[M],testerr[M], 'g')
        plt.xlabel('iteration')
        plt.ylabel('loss')
        plt.title(modelNames[M])
        if (np.size(ylims)>0):
            if np.size(ylims)==2:
                plt.ylim((ylims[0],ylims[1]))
            else:
                plt.ylim((ylims[M][0],ylims[M][1]))


if __name__ == "__main__":     
    
    # either call this manually in the shell, or through this python command:
    # the parselog2.sh script parses the training_log to prepare the data for plotting
    a = call(["parselog2.sh", "training_log.txt"]) # CHANGETHIS to take as input your training log
    # this script will produce training_log.txt.train and training_log.txt.test files which you will input below
    
    modelNames = ['massvis_fcn32']

    N = len(modelNames)

    iternum = [None]*N; trainerr = [None]*N; lr = [None]*N; iternum_test = [None]*N; testerr = [None]*N;
    
    M = 0
    iternum[M],trainerr[M],lr[M],iternum_test[M],testerr[M] = parse_results('training_log.txt.train',\ # CHANGETHIS
                                                                                'training_log.txt.test');  # CHANGETHIS

    #can add any number of additional model log files like this, in order to compare multiple training curves 
    #(update modelNames to contain these additional models)
    #M = 1
    #iternum[M],trainerr[M],lr[M],iternum_test[M],testerr[M] = pph.parse_results('training_log2.txt.train',\ # CHANGETHIS
    #                                                                            'training_log2.txt.test');  # CHANGETHIS

    plotErrors(iternum,trainerr,lr,iternum_test,testerr,modelNames,M+1,np.array([0,14e4])) # CHANGETHIS to whatever lower and upper limits you want for the y-axis to visualize your plot
